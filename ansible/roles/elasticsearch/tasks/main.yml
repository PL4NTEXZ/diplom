---
- name: Update apt cache
  apt:
    update_cache: yes

- name: Install reqs for Docker
  apt: 
    name: 
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - software-properties-common
      - python3-pip
      - virtualenv
      - python3-setuptools
    state: latest 
    update_cache: yes

#- name: Add the GPG key for Docker
#  shell: 'curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg'

- name: Add the repository
  shell: 'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian bullseye stable" | tee /etc/apt/sources.list.d/docker.list'

- name: Update and install docker
  apt: 
    update_cache: yes
    name: docker-ce
    state: latest

- name: Configure firewall (UFW)
  block:
    - name: Allow SSH through firewall (чтобы не потерять доступ)
      ufw:
        rule: allow
        port: 22
        proto: tcp

    - name: Allow Elasticsearch ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 9200
        - 9300

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny

- name: Install the Docker module for Python
  pip:
    name: docker
  notify: docker systemd

- name: Create dir for data
  file:
    path: /etc/elasticsearch/data
    state: directory
    owner: 1000
    group: 1000
    mode: 0777

- name: Create container
  docker_container:
    name: "Elasticsearch"
    image: "bitnami/elasticsearch:latest"
    user: 1000
    volumes:
    - "/etc/elasticsearch/data:/bitnami/elasticsearch/data"
    ports:
    - "9200:9200"
    - "9300:9300"
    env:
        ELASTICSEARCH_CLUSTER_NAME: "netology"
        ELASTICSEARCH_ENABLE_SECURITY: "false"
        ELASTICSEARCH_SKIP_TRANSPORT_TLS: "true"
        ELASTICSEARCH_HEAP_SIZE: "1g"
    state: started
    restart_policy: always

- name: Wait for Elasticsearch to become healthy
  uri:
    url: "http://localhost:9200/_cluster/health"
    method: GET
    status_code: 200
    timeout: 30
  register: health_check
  retries: 10
  delay: 10
  until: health_check.status == 200
  ignore_errors: yes

- name: Check if Elasticsearch is running
  docker_container_info:
    name: Elasticsearch
  register: container_status

- name: Verify container is running
  assert:
    that:
      - container_status.container.State.Status == "running"
      - container_status.container.State.Running == true
    fail_msg: "Elasticsearch container is not running"
    success_msg: "Elasticsearch container is running successfully"

- name: Get container logs if health check failed
  shell: "docker logs Elasticsearch"
  register: container_logs
  when: health_check is failed or container_status.container.State.Status != "running"
  ignore_errors: yes

- name: Display container logs if there was an error
  debug:
    var: container_logs.stdout_lines
  when: health_check is failed or container_status.container.State.Status != "running"

- name: docker container ls -a
  tags: container_ls
  shell: "docker container ls -a"
  register: container_info

- name: docker container ls -a result
  tags: container_ls
  debug:
    msg: "{{container_info.stdout_lines}}"
